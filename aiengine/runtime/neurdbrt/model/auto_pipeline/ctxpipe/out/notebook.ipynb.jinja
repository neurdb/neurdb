{
    "cells": [
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "\"\"\"\n",
                "THIS FILE IS AUTO-GENERATED BY AEXPLORE, A MODULE OF ASCENT. FEEL FREE TO EDIT.\n",
                "\n",
                "NOTE: This file is licensed under the 0BSD license. You are allowed to remove \n",
                "this copyright cell.\n",
                "\n",
                "Copyright (c) ASCENT Contributors.\n",
                "\n",
                "Permission to use, copy, modify, and/or distribute this software for any\n",
                "purpose with or without fee is hereby granted.\n",
                "\n",
                "THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\n",
                "REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\n",
                "AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\n",
                "INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\n",
                "LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\n",
                "OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\n",
                "PERFORMANCE OF THIS SOFTWARE.\n",
                "\"\"\""
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "{{ meta.head | valid_json }}",
                "\n",
                "{{ meta.global | valid_json }}"
            ]
        },
{% for component in components %}
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "{{ component.head | valid_json }}",
                "\n",
                "{{ component.global | valid_json }}"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": "def component{{ loop.index }}(train_x, test_x, train_y, test_y):\n    {{ component.local | valid_json }}\n    return train_x, test_x, train_y, test_y"
        },
{% endfor %}
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "{{ model.head | valid_json }}",
                "\n",
                "{{ model.global | valid_json }}"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "def main(data_path: str):\n",
                "    # load data\n",
                "    data = pd.read_csv(os.path.join(data_path, \"data.csv\"))\n",
                "\n",
                "    data_x = data.drop(columns=[\"{{ label_column }}\"])\n",
                "    data_y = data[\"{{ label_column }}\"]\n",
                "\n",
                "    ratio = 0.8\n",
                "    split_random_state = 42\n",
                "    \n",
                "    train_x, test_x, train_y, test_y = train_test_split(\n",
                "        data_x,\n",
                "        data_y,\n",
                "        train_size=ratio,\n",
                "        test_size=1 - ratio,\n",
                "        random_state=split_random_state,\n",
                "    )\n",
                "\n",
                "    # run components\n",
                "    pipeline = [\n",
                "        {% for component in components %}component{{ loop.index }},{% if not loop.last %}\n        {% endif %}{% endfor %}\n",
                "    ]\n",
                "\n",
                "    for i, component in enumerate(pipeline):\n",
                "        train_x, test_x, train_y, test_y = component(train_x, test_x, train_y, test_y)\n",
                "        print(f\"component {i + 1} done\")\n",
                "        print(\"train_x.head():\")\n",
                "        print(train_x.head())\n",
                "        print(\"test_x.head():\")\n",
                "        print(test_x.head())\n",
                "        print()\n",
                "\n",
                "    {{ model.local | valid_json }}\n",
                "    # save result\n",
                "    combined_data = pd.concat([train_x, test_x], axis=0)\n",
                "    combined_data[\"{{ label_column }}\"] = [*train_y, *test_y]\n",
                "    combined_data.to_csv(os.path.join(data_path, \"result.csv\"), index=False)"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": null,
            "metadata": {},
            "outputs": [],
            "source": [
                "# assume dataset is in {{ data_dir }}\n",
                "main(data_path=\"{{ data_dir }}\")"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "ascent",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "name": "python",
            "version": "3.10.17"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 5
}
